

using Grpc.Core;
using Grpc.Net.Client;
using Microsoft.Extensions.Options;
using Shared;
using Shared.Configurations;

namespace gRPC_Client.Services;

public class BillClient(ILogger<BillClient> logger, IOptions<GrpcCfg> options) : BackgroundService {
    private readonly GrpcCfg _cfg = options.Value;

    protected override async Task ExecuteAsync(CancellationToken stoppingToken) {
        using var channel = GrpcChannel.ForAddress($"http://{_cfg.Host}:{_cfg.Port}");
        var client = new BillService.BillServiceClient(channel); // Autogenerated

        while (!stoppingToken.IsCancellationRequested) {
            var request = new GetBillsRequest() { Count = new Random().Next(1,40)};
            
            logger.LogInformation("Starting to Stream with Count: " + request.Count);
        
            var call = client.BillService(request, cancellationToken: stoppingToken);
            var responseStream = call.ResponseStream;
            
            while (await responseStream.MoveNext(stoppingToken)) {
                var bill = responseStream.Current;
                logger.LogInformation($"Bill Id: {bill.Id} - Title: {bill.Title}");
            }
        
            logger.LogInformation("Finished Streaming");
            await Task.Delay(5000, stoppingToken);
        }
    }
}